
/*
70. 爬楼梯(=跳台阶)
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。

示例 1：
输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
*/

/*动态规划典型例题，斐波拉契数列的隐晦版，找零钱问题的原型
只能跳1和2 => 最后一步n的跳法，是两种可能的并集： 从n-1跳1级，从n-2跳2级
dp[i] = dp[n-1] + dp[n-2];
注意示例，dp[0]定义为1
*/

class Solution {
public:
    int climbStairs(int n) {
    	//注意，如果n=0,1,2 dp[n]=n, 
    	//为了避免可能的数组越界，例如n=2，初始条件却包含dp[3]，直接返回n<3的所有情况
    	if(n < 3) 
    		return n; 

    	vector<int> dp(n + 1, 0); //台阶数从0~n,共n+1个成员

    	//初始条件
    	dp[0] = 0; //有的解法把dp[0]定义为1，使递推从i=2开始生效，不过不符合逻辑
    	dp[1] = 1;
    	dp[2] = 2;
    
    	for(int i = 3; i <= n; i++)
    		dp[i] = dp[i-1] + dp[i-2];
    	
    	return dp[n];
    }
};