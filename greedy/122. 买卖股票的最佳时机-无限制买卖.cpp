/*
122 买卖股票的最佳时机 II

题目描述
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）

输入: [7,1,5,3,6,4]
输出: 7

*/


/*
解题思路：贪心算法（无限次买卖具有无后效性，前面买卖不影响后面）

股票买卖策略：

1.单独交易日： 
设今天价格 p_1p 、明天价格 p_2p 则今天买入、明天卖出可赚取金额 p_2 - p_1p 

2.连续上涨交易日： 
设此上涨交易日股票价格分别为 p_1, p_2, ... , p_n, 则第一天买最后一天卖收益最大，即 p_n - p_1p  
* 可以分解连续进行多次单独交易日，满足贪心算法“单步最优”的解题思路，这也是本题关键点

3.连续下降交易日： 则不买卖收益最大，即不会亏钱。

算法流程：

遍历整个股票交易日价格列表 price，策略是所有上涨交易日都买卖（赚到所有利润），所有下降交易日都不买卖（永不亏钱）。
设 tmp 为第 i-1 日买入与第 i 日卖出赚取的利润，即 tmp = prices[i] - prices[i - 1]
当该天利润为正 tmp > 0，则将利润加入总利润 profit；当利润为 00 或为负，则直接跳过；
遍历完成后，返回总利润 profit。

复杂度分析：
时间复杂度 O(N)O(N) ： 只需遍历一次price；
空间复杂度 O(1)O(1) ： 变量使用常数额外空间。

*/


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for (int i = 1; i < prices.size(); ++i)
        {
        	if(prices[i] - prices[i-1] > 0)
        		profit += prices[i] - prices[i-1];
        }
        return profit;
    }
};